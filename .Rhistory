# names(df)
# df$data
# df$vars
fix_names <- function(df, strP, repP){
stopifnot(is.data.frame(df), is.character(strP), is.character(repP))
names(df) <- str_replace_all(names(df), strP, repP)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)), # e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df
df$data[[3]] %>%
left_join(df$data[[4]], by = "County")
df_all %>%
left_join(df_pop, by = c("Country_Region" = "Location")) ->df_allp
df_allp
df_allp %>%
filter(Country_Region == "US")
df_allp %>%
filter(case_type == "confirmed_US")
df_allp %>%
filter(case_type == "confirmed_US")
df_allp %>%
filter(case_type == "deaths_US")
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)), # e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df
# Reference
# https://www.itread01.com/content/1548936390.html
# https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf
df %>%
mutate(case_type = as.factor(str_extract(file_names, "[a-z]*[:punct:][gU][a-zA-Z]*")))->df
df
df %>%
select(-file_names, -url)->df
df
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df
# Visually compare them
map(df$vars, ~unlist(.)[1:15])
# names(df)
# df$data
# df$vars
fix_names <- function(df, strP, repP){
stopifnot(is.data.frame(df), is.character(strP), is.character(repP))
names(df) <- str_replace_all(names(df), strP, repP)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)), # e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df
# Reference
# https://www.itread01.com/content/1548936390.html
# https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf
df %>%
mutate(case_type = as.factor(str_extract(file_names, "[a-z]*[:punct:][gU][a-zA-Z]*")))->df
df
df %>%
select(-file_names, -url)->df
df
setwd("~/CYL/hw_07-ChiYunLiu")
df %>%
mutate(data = map(url, ~read_csv(.)))->df
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df
# Reference
# https://www.itread01.com/content/1548936390.html
# https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf
df %>%
mutate(case_type = as.factor(str_extract(file_names, "[a-z]*[:punct:][gU][a-zA-Z]*")))->df
df
df %>%
select(-file_names, -url)->df
df
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df
# Visually compare them
map(df$vars, ~unlist(.)[1:15])
# names(df)
# df$data
# df$vars
fix_names <- function(df, strP, repP){
stopifnot(is.data.frame(df), is.character(strP), is.character(repP))
names(df) <- str_replace_all(names(df), strP, repP)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)), # e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df$vars
#df$data #---> check data
# reference:
# https://tidyr.tidyverse.org/articles/pivot.html
# https://dplyr.tidyverse.org/reference/select.html
library(lubridate)
df %>%
mutate(data = map(data, ~pivot_longer(data = ., cols = matches("\\/"), names_to = "Date", values_to = "daily_values", names_transform = list(Date = mdy))))->df_long
#df$data # ---> check data
# reference:
# https://github.com/vincentarelbundock/countrycode
# https://rdocumentation.org/packages/countrycode/versions/1.2.0/topics/countrycode
library(countrycode)
df_long %>%
mutate(data = map(data, ~mutate(., Continent = countrycode(Country_Region, "country.name", "continent"))))->df_long
#df$data
# information from wikipedia
# Diamond Princess ---> cruises operating in Asia
# Kosovo ---> Republika e Kosoves in Europe
# MS Zaandam ---> Cruises operating in Europe
# Micronesia ---> Federated States of Micronesia in Oceania
# df$data[[1]] %>% filter(Country_Region == "Diamond Princess") ---> check NA value
df_long %>%
mutate(data = map(data, ~mutate(., Continent = case_when(Country_Region == "Diamond Princess" ~ "Asia",
Country_Region == "Kosoves" ~ "Europe",
Country_Region == "MS Zaandam" ~ "Europe",
Country_Region == "Micronesia" ~"Oceania",
TRUE ~ Continent))))->df_long
map(df_long$data, ~unique(.$Continent))
df$data
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df
# Reference
# https://www.itread01.com/content/1548936390.html
# https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf
df %>%
mutate(case_type = as.factor(str_extract(file_names, "[a-z]*[:punct:][gU][a-zA-Z]*")))->df
df
df %>%
select(-file_names, -url)->df
df
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df
# Visually compare them
map(df$vars, ~unlist(.)[1:15])
# names(df)
# df$data
# df$vars
fix_names <- function(df, strP, repP){
stopifnot(is.data.frame(df), is.character(strP), is.character(repP))
names(df) <- str_replace_all(names(df), strP, repP)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)), # e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df$data
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df$vars
#df$data #---> check data
# reference:
# https://tidyr.tidyverse.org/articles/pivot.html
# https://dplyr.tidyverse.org/reference/select.html
library(lubridate)
df %>%
mutate(data = map(data, ~pivot_longer(data = ., cols = matches("\\/"), names_to = "Date", values_to = "daily_values", names_transform = list(Date = mdy))))->df_long
#df$data # ---> check data
# reference:
# https://github.com/vincentarelbundock/countrycode
# https://rdocumentation.org/packages/countrycode/versions/1.2.0/topics/countrycode
library(countrycode)
df_long %>%
mutate(data = map(data, ~mutate(., Continent = countrycode(Country_Region, "country.name", "continent"))))->df_long
#df$data
# information from wikipedia
# Diamond Princess ---> cruises operating in Asia
# Kosovo ---> Republika e Kosoves in Europe
# MS Zaandam ---> Cruises operating in Europe
# Micronesia ---> Federated States of Micronesia in Oceania
# df$data[[1]] %>% filter(Country_Region == "Diamond Princess") ---> check NA value
df_long %>%
mutate(data = map(data, ~mutate(., Continent = case_when(Country_Region == "Diamond Princess" ~ "Asia",
Country_Region == "Kosoves" ~ "Europe",
Country_Region == "MS Zaandam" ~ "Europe",
Country_Region == "Micronesia" ~"Oceania",
TRUE ~ Continent))))->df_long
map(df_long$data, ~unique(.$Continent))
df_long %>%
unnest(cols = data) %>%
ungroup()->df_all
# reference
# http://datasharkie.com/how-to-remove-data-frame-in-r
remove(df,df_long)
df_all %>%
select(-vars)->df_all
df_all
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df
# Reference
# https://www.itread01.com/content/1548936390.html
# https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf
df %>%
mutate(case_type = as.factor(str_extract(file_names, "[a-z]*[:punct:][gU][a-zA-Z]*")))->df
df
df %>%
select(-file_names, -url)->df
df
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df
# Visually compare them
map(df$vars, ~unlist(.)[1:15])
# names(df)
# df$data
# df$vars
fix_names <- function(df, strP, repP){
stopifnot(is.data.frame(df), is.character(strP), is.character(repP))
names(df) <- str_replace_all(names(df), strP, repP)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = left_join(df$data[[3]], df$data[[4]], by = "Population"))), # e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)),# e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df$data
df_pop %>%
ggplot(aes(x = rankD, y = rankT)) +
geom_point()+
geom_smooth(method = "lm", formula = y ~x, se = FALSE)
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv", "time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv", "time_series_covid19_deaths_US.csv"))
df %>%
mutate(url = str_c(url_in, file_names, sep = ""))-> df
df
df %>%
mutate(data = map(url, ~read_csv(.)))->df
df
# Reference
# https://www.itread01.com/content/1548936390.html
# https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf
df %>%
mutate(case_type = as.factor(str_extract(file_names, "[a-z]*[:punct:][gU][a-zA-Z]*")))->df
df
df %>%
select(-file_names, -url)->df
df
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df
# Visually compare them
map(df$vars, ~unlist(.)[1:15])
# names(df)
# df$data
# df$vars
fix_names <- function(df, strP, repP){
stopifnot(is.data.frame(df), is.character(strP), is.character(repP))
names(df) <- str_replace_all(names(df), strP, repP)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")), # b
data = map(data, ~fix_names(., "Admin2", "County")), # c
data = map(data, ~fix_names(., "Long_", "Long")), # c
data = map_if(data, str_detect(df$case_type, "US"),
~select(., -c("UID", "iso2", "iso3", "code3", "FIPS", "Combined_Key"))), # d
data = map_if(data, str_detect(df$case_type,"global"), ~mutate(., Population = 0)),
data = map_if(data, str_detect(df$case_type, "global"), ~mutate(., County = "NA")),
data = map_if(data, str_detect(df$case_type, "confirmed_US"), ~mutate(., Population = 0)),# e
data = map(data, ~unite(., "Country_State", c("Country_Region", "Province_State"), sep = "_", remove = FALSE, na.rm = TRUE)),
data = map_if(data, str_detect(df$case_type, "global"), ~select(.,"Population", "County", everything())),
data = map_if(data, str_detect(df$case_type, "US"), ~select(.,"Population", "County", everything()))
) ->df #f
df$data
df %>%
mutate(vars = map(data, names)) %>%
mutate(vars = map(vars, ~unlist(.)[1:15])) ->df
df$vars
#df$data #---> check data
# reference:
# https://tidyr.tidyverse.org/articles/pivot.html
# https://dplyr.tidyverse.org/reference/select.html
library(lubridate)
df %>%
mutate(data = map(data, ~pivot_longer(data = ., cols = matches("\\/"), names_to = "Date", values_to = "daily_values", names_transform = list(Date = mdy))))->df_long
#df$data # ---> check data
# reference:
# https://github.com/vincentarelbundock/countrycode
# https://rdocumentation.org/packages/countrycode/versions/1.2.0/topics/countrycode
library(countrycode)
df_long %>%
mutate(data = map(data, ~mutate(., Continent = countrycode(Country_Region, "country.name", "continent"))))->df_long
#df$data
# information from wikipedia
# Diamond Princess ---> cruises operating in Asia
# Kosovo ---> Republika e Kosoves in Europe
# MS Zaandam ---> Cruises operating in Europe
# Micronesia ---> Federated States of Micronesia in Oceania
# df$data[[1]] %>% filter(Country_Region == "Diamond Princess") ---> check NA value
df_long %>%
mutate(data = map(data, ~mutate(., Continent = case_when(Country_Region == "Diamond Princess" ~ "Asia",
Country_Region == "Kosoves" ~ "Europe",
Country_Region == "MS Zaandam" ~ "Europe",
Country_Region == "Micronesia" ~"Oceania",
TRUE ~ Continent))))->df_long
map(df_long$data, ~unique(.$Continent))
df_long %>%
unnest(cols = data) %>%
ungroup()->df_all
# reference
# http://datasharkie.com/how-to-remove-data-frame-in-r
remove(df,df_long)
df_all %>%
select(-vars)->df_all
df_all
df_pop <- read_csv("./data/WPP2019_TotalPopulation.csv")
df_pop
setdiff(df_all$Country_Region, df_pop$Location)
setdiff(df_pop$Location, df_all$Country_Region) -> not_in_covid
not_in_covid
# 46 countries in there
df_pop %>%
filter(Location %in% not_in_covid) %>%
summarise(not_in_covid_total = sum(PopTotal))->sum_not_in_covid
df_pop %>%
summarise(world_pop = sum(PopTotal))->world_total_pop
sum_not_in_covid/world_total_pop
# 6 % of the world population contained in these countries
semi_join(df_pop, df_all, by = c("Location" = "Country_Region"))->df_pop
df_pop
# reference
# https://www.datasciencemadesimple.com/rank-function-in-r/
# https://stackoverflow.com/questions/26423493/r-rank-largest-to-smallest/26423543
df_pop %>%
mutate(rankT = rank(-PopTotal, na.last = TRUE, ties.method = "min"),
rankD = rank(-PopDensity, na.last = TRUE, ties.method = "min")) ->df_pop
df_pop %>%
arrange(rankT) %>%
slice_head(n = 10) %>%
select(Location,PopTotal,rankT)
df_pop %>%
arrange(rankD) %>%
slice_head(n = 10) %>%
select(Location, PopDensity, rankD)
df_pop %>%
ggplot(aes(x = rankD, y = rankT)) +
geom_point()+
geom_smooth(method = "lm", formula = y ~x, se = FALSE)
summary(lm(rankD ~ rankT, data = df_pop))
